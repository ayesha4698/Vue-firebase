
<!-- saved from url=(0022)http://localhost:8000/ -->
<html class="gr__localhost"><head><meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <title>INFO 3300 - HW4</title>

  <link href="./INFO 3300 - HW4_files/css" rel="stylesheet">

  <link rel="stylesheet" href="./INFO 3300 - HW4_files/default.min.css">
  <script src="./INFO 3300 - HW4_files/highlight.min.js"></script>
  <script src="./INFO 3300 - HW4_files/d3.v5.min.js"></script>
  <style>
    .axisRed path{
      stroke: gray;
    }
</style>

</head>


<body data-gr-c-s-loaded="true">
<p id="p1"><br>Problem 1:<br>
<svg width="800" height="500"><g transform="translate(50,0 )" class="axisRed"></g></svg></p><ol type="A">
    <li>The data issues were that the dollar values had
     both commas and a dollar sign. Then the number 
     were all strings. Then the NA, empty strings,
      and N/A were not filtered from the data. </li>
    <li> </li>
    <li> </li>
    <li> </li>

</ol>
<p></p>

<p id="p2">Problem 2:<br>


<svg width="400" height="400"><g style="stroke-width: 2px; stroke: rgb(0, 0, 0); fill: none;"><path d="M75 350 H 140 V 250 H 160 V 350 H 350"></path><circle cx="75" cy="350" r="5" style="fill: rgb(238, 255, 255);"></circle><rect x="200" y="350" width="50" height="10" style="fill: rgb(255, 221, 221);"></rect><path d="M75,350L76.81173331571765,343.4240192159765L78.62346663143529,337.03353843195305L80.43519994715294,330.8285576479296L82.24693326287058,324.8090768639061L84.05866657858823,318.97509607988263L85.87039989430588,313.32661529585914L87.68213321002352,307.86363451183564L89.49386652574117,302.5861537278122L91.30559984145881,297.4941729437887L93.11733315717646,292.5876921597652L94.92906647289409,287.8667113757418L96.74079978861174,283.3312305917183L98.55253310432938,278.9812498076948L100.36426642004703,274.8167690236713L102.17599973576468,270.83778823964786L103.98773305148232,267.0443074556244L105.79946636719997,263.4363266716009L107.61119968291761,260.0138458875774L109.42293299863526,256.776865103554L111.2346663143529,253.7253843195305L113.04639963007054,250.85940353550703L114.85813294578818,248.17892275148353L116.66986626150583,245.6839419674601L118.48159957722348,243.3744611834366L120.29333289294112,241.2504803994131L122.10506620865878,239.31199961538965L123.91679952437643,237.5590188313662L125.72853284009409,235.99153804734271L127.54026615581174,234.60955726331923L129.35199947152938,233.41307647929574L131.16373278724703,232.40209569527227L132.97546610296467,231.5766149112488L134.78719941868232,230.93663412722532L136.5989327344,230.48215334320184L138.41066605011764,230.21317255917836L140.22239936583526,230.12969177515492L142.03413268155293,230.23171099113142L143.84586599727058,230.51923020710797L145.65759931298822,230.99224942308447L147.46933262870587,231.65076863906103L149.28106594442352,232.49478785503754L151.0927992601412,233.52430707101405L152.9045325758588,234.7393262869906L154.71626589157648,236.13984550296715L156.52799920729413,237.72586471894365L158.33973252301178,239.4973839349202L160.15146583872945,241.45440315089672L161.96319915444707,243.59692236687323L163.77493247016474,245.92494158284978L165.58666578588236,248.43846079882633L167.39839910160003,251.13748001480283L169.21013241731765,254.0219992307794L171.02186573303533,257.0920184467559L172.83359904875297,260.3475376627324L174.64533236447062,263.78855687870896L176.45706568018826,267.4150760946855L178.2687989959059,271.22709531066204L180.08053231162359,275.22461452663856L181.8922656273412,279.4076337426151L183.70399894305888,283.77615295859164L185.5157322587765,288.33017217456813L187.32746557449417,293.0696913905447L189.13919889021182,297.9947106065212L190.95093220592946,303.10522982249773L192.7626655216471,308.40124903847425L194.57439883736478,313.8827682544508L196.38613215308243,319.5497874704273L198.19786546880005,325.40230668640385L200.00959878451772,331.4403259023804L201.8213321002354,337.6638451183569L203.633065415953,344.0728643343335L205.44479873167046,350" style="stroke: black;"></path><text x="205.44479873167046" y="370" style="/* font-weight: 1000; */text-anchor: middle;dominant-baseline: middle;font-family: sans-serif;font-weight: 10;">HIT, 7.2s, 26.09m</text><path d="M75,350L76.62871315483505,343.78424960542065L78.2574263096701,337.7539992108413L79.88613946450515,331.90924881626194L81.51485261934019,326.2499984216826L83.14356577417524,320.77624802710324L84.77227892901028,315.4879976325239L86.40099208384534,310.38524723794455L88.02970523868038,305.4679968433652L89.65841839351543,300.73624644878583L91.28713154835049,296.1899960542065L92.91584470318553,291.82924565962713L94.54455785802058,287.6539952650478L96.17327101285562,283.66424487046845L97.80198416769068,279.8599944758891L99.43069732252572,276.24124408130973L101.05941047736076,272.8079936867304L102.68812363219581,269.56024329215103L104.31683678703087,266.4979928975717L105.9455499418659,263.62124250299235L107.57426309670095,260.929992108413L109.202976251536,258.4242417138337L110.83168940637104,256.1039913192543L112.46040256120608,253.96924092467498L114.08911571604114,252.0199905300956L115.71782887087619,250.2562401355163L117.34654202571123,248.67798974093694L118.97525518054628,247.28523934635757L120.60396833538132,246.07798895177825L122.23268149021638,245.0562385571989L123.86139464505143,244.21998816261953L125.49010779988649,243.5692377680402L127.11882095472154,243.10398737346088L128.7475341095566,242.82423697888152L130.37624726439162,242.72998658430217L132.00496041922668,242.8212361897228L133.63367357406173,243.09798579514347L135.2623867288968,243.56023540056412L136.89109988373184,244.20798500598477L138.5198130385669,245.04123461140543L140.14852619340195,246.05998421682608L141.777239348237,247.26423382224675L143.40595250307206,248.65398342766738L145.0346656579071,250.22923303308806" style="stroke: red;"></path></g></svg></p>

<script>
//////Q1////////////////////////////
  var  blockbustersData = [];
  var maxY = 0;
  var min = 0;
  let  busterFunc =  d3.json("blockbusters.json").then( function(data) {
      //turn strings into 
    data.forEach( (d, i) => {
          
      d['rank_in_year'] =  Number(d["rank_in_year"])  ;
      d['year'] =  Number(d['year'])   ;
      d['imdb_rating'] =  Number(d['imdb_rating'].replace(/,/g,""))   ;
      d['length'] =  Number(d['length'].replace(/,/g,"")) ;
      d["worldwide_gross" ] =  Number(d["worldwide_gross"].replace(/,/g,"").replace("$","")) ;
      
    });

      //return true if u want to keep element
    function keep(d) {
      if (d != "NA"&& d != "N/A" && d != "" ){return true;}
      else{return false;}
    }


    data = 
      data.filter( d => 
        keep(d['rank_in_year']) &&
        keep(d['rating']) &&
        keep(d['imdb_rating']) &&
        keep(d['title']) &&
        keep(d['worldwide_gross']) &&
        keep(d['length']) &&
        keep(d['studio']) &&
        keep(d['year']) &&
        keep(d['Main_Genre'])
      );

        blockbustersData = data;
        console.log(data)

      let maxYOR = d3.max(data, function (d) { return d['year'] });
      let maxWWG = d3.max(data, function (d) { return d['worldwide_gross'] });
      let maxrIMBD = d3.max(data, function (d) { return d['imdb_rating'] });
      
      let minYOR = d3.min(data, function (d) { return d['year'] });
      let minWWG = d3.min(data, function (d) { return d['worldwide_gross'] });
      let minrIMBD = d3.min(data, function (d) { return d['imdb_rating'] });
      
      let svgB = d3.select("#p1").append("svg").attr("width","800").attr("height","500");
      let width = svgB.attr("width");
      let height = svgB.attr("height");

      // This is a clever way to do padding that is more adjustable when you are designing
      let margin = { top: 10, right: 10, bottom: 50, left: 50};
      let chartWidth = width - margin.left - margin.right; // If you know the key is fixed text, you can access it with . instead of [""]
      let chartHeight = height - margin.top - margin.bottom;


      var x_axis = d3.axisBottom().scale(xYOR);

      let yGridlineAxis = d3.axisLeft(yScale).tickSize(-620-10).tickFormat("")

      var y_axis = d3.axisLeft()
        .scale(yWWG)
        .tickFormat(d3.format(".1e"));

       

  svgB.append("g")
       .attr("transform", "translate(50,0 )")
       .attr("class", "axisRed")
       .call(y_axis);



    svgB.append("g")
            .attr("transform", "translate(80, 490)")
            .call(x_axis)

    

      var xYOR = d3.scaleLinear()
        .domain([minYOR, maxYOR])
        .range([80, 700]);  

      var yWWG = d3.scaleLinear()
            .domain([minWWG, maxWWG])
            .range([450, 20]);
      
      var rIMBD = d3.scaleLinear()
            .domain([minrIMBD, maxrIMBD])
            .range([2, 15]);

      var colorScale = d3.scaleOrdinal(d3.schemeAccent.concat(d3.schemeDark2));
      var radius ;
       function handleMouseOver(d, i) {  // Add interactivity
            console.log(d)
            // Use D3 to select element, change color and size
            radius = Number(d3.select(this).circle.attr("r"))
            console.log(radius)
            d3.select(this).attr({
              
              r: r * 2
            });


            // Specify where to put label of text
            svg.append("text").attr({
               id: "t" + d.x + "-" + d.y + "-" + i,  // Create an id for text so we can select it later for removing on mouseout
                x: function() { return xYOR(d['year']) ; },
                y: function() { return yWWG(d['worldwide_gross']); }
            })
            .text(function() {
              return [d.title];  // Value of the text
            });
            radius = r
          }

       function handleMouseOut(d, i) {
            // Use D3 to select element, change color back to normal
            d3.select(this).attr({
              r: radius
            });

            // Select text by id and then remove
            d3.select("#t" + d.x + "-" + d.y + "-" + i).remove();  // Remove text location
          }

      data.forEach(function(d){
        svgB.append("circle")
            .attr("r", rIMBD(d['imdb_rating']))
            .attr("cx", xYOR(d['year']))
            .attr("cy", yWWG(d['worldwide_gross'])) 
            .style("fill", pickCol(d['Main_Genre']))
            .style("opacity", ".4")
            .on("mouseover", handleMouseOver)
            .on("mouseout", handleMouseOut) 

          })
      d3.selectAll("circle")

      


      
            
      
  });

    ///////////////////Q2///////////

    let svg2 = d3.select("#p2").append("svg").attr("width","400").attr("height","400");
      svgBack = svg2.append("g").style("stroke-width", "2px").style("stroke", "#000").style("fill", "none");
      svgBack.append("path")
      .attr("d", "M75 350 H 140 V 250 H 160 V 350 H 350")

      svgBack.append("circle").attr("cx", "75").attr("cy", "350").attr("r", "5").style("fill", "#EFF")
      svgBack.append("rect").attr("x", "200").attr("y", 350).attr("width", "50").attr("height", "10").style("fill", "#FDD")
     
     var xScale = d3.scaleLinear()
        .domain([0, 35])
        .range([75, 250]);  

      var yScale = d3.scaleLinear()
            .domain([0, 25])
            .range([350, 225]);

      data = [];
      var time = 0;
      var range = 0;


      function trajectory ( iv, angle){
        rad = angle * (Math.PI / 180);
        console.log(rad);
        trajArr = [] ;
        var obj1 = { 
        ground : 0,
        x : 0, 
        y : 0,
        xV : iv * Math.cos(rad),
        yV : iv * Math.sin(rad),
        xA : 0,
        yA : -3.71 / 10}
        
        var y = 0; var x = 0;  var count = 0; var ground = 0;
        trajArr.push(obj1);
        while(y >= ground){
          var xV = trajArr[count].xV + trajArr[count].xA;
          var yV = trajArr[count].yV + trajArr[count].yA ;
          x = x + .1 * xV;
          y = y + .1 * yV;
          if(x>=13 && x<=17){ground = 20;}
          else{ground = 0;}
          var obj1 = {
            ground : ground,
            x : x,
            y : y,
            xV : xV,
            yV : yV,
            xA : 0,
            yA : -3.71 / 10}

            count++;
            if(y >= 0 ){
              trajArr.push(obj1);
            }
             
            
          }
          if(trajArr[trajArr.length -1].y != 0){
     
              time = trajArr.length * .1
               console.log("time"+ time);
               range = time * trajArr[0].xV;
               console.log("r"+ range);
               obj1 = {
                ground : ground,
                x : range,
                y : 0,
                xV : xV,
                yV : yV,
                xA : 0,
                yA : -3.71 / 10}
                trajArr.push(obj1);

             }



        console.log(trajArr);
        return trajArr;
      }

     var a =  trajectory(14, 75);

      function plotTrajectory(arr, color){

        var points = [];
        arr.forEach( d => {
          var coor = [xScale(d.x),yScale(d.y)];
          points.push(coor)
        })
       
        console.log(points)
        var lineGenerator = d3.line();
        var pathData = lineGenerator(points);
        svgBack.append("path").attr('d', pathData).style("stroke", color);

          var message = "";
      if(arr[arr.length-1].x>= 25 && arr[arr.length-1].x<= 35){
          message = "HIT"
      }
      else{
        message = "MISSed"
      }
      
      message = message + ", " + time+ "s, " + range.toFixed(2) + "m"
      if(color != "red"){
        svgBack.append("text").text(d => message )
                .style("font-weight", "50")
                .style("text-anchor", "middle")
                .style("dominant-baseline", "middle" )
                .attr("x", xScale(arr[arr.length-1].x))
                .attr("y", yScale(arr[arr.length-1].y)+20)

      }
      

      }
    

       plotTrajectory(a, "black")

      function trajectoryWithWind ( iv, angle, windA){
        rad = angle * (Math.PI / 180);
        console.log(rad);
        trajArr = [] ;
        var obj1 = { 
        ground : 0,
        x : 0, 
        y : 0,
        xV : iv * Math.cos(rad),
        yV : iv * Math.sin(rad),
        xA : windA,
        yA : -3.71 / 10}
        
        var y = 0; var x = 0;  var count = 0; var ground = 0;
        trajArr.push(obj1);
        while(y >= ground){
          var xV = trajArr[count].xV + trajArr[count].xA;
          var yV = trajArr[count].yV + trajArr[count].yA ;
          x = x + .1 * xV;
          y = y + .1 * yV;
          if(x>=13 && x<=17){ground = 20;}
          else{ground = 0;}
          var obj1 = {
            ground : ground,
            x : x,
            y : y,
            xV : xV,
            yV : yV,
            xA : 0,
            yA : -3.71 / 10}

            count++;
            if(y >= 0 ){
              trajArr.push(obj1);
            }
            
          }


        console.log(trajArr);
        return trajArr;

      }

      var arr2 = trajectoryWithWind(13, 80, 1);
      plotTrajectory(arr2, "red");
</script>








</body></html>